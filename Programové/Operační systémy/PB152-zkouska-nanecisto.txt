NOK	Všechny příkazové interprety z rodiny Bourne shell umožňují použití jednoduchých proměnných několika základních typů: celočíselných, řetězcových, cest k souborům a seznamů. Správnost typů je při použití proměnných kontrolována, typovou chybu indikuje interpret nastavením proměnné $? na nenulovou hodnotu.
NOK	Interprety z rodiny Bourne shell disponují základními konstrukcemi toku řízení (control flow): if a case. Ve srovnání s běžnými programovacími jazyky chybí zejména možnost opakovaného vykonávání části programu (cyklus).
NOK	Programy v POSIXových systémech si vzájemně při volání funkce exec předávají tzv. proměnné prostředí. Jedná se o jednoduché textové proměnné, které typicky slouží k nastavení základních parametrů systému (jako cesta k domovskému adresáři, seznam složek, ve kterých se mají hledat spustitelné programy a pod.). Za normálních okolností může proces nastavit pouze své vlastní proměnné prostředí: systémová volání fork a exec takto změněné proměnné zachovají, a změny se tak projeví i v novém procesu, nebo novém programu. Pro změnu proměnných prostředí v jiném procesu předepisuje POSIX speciální systémové volání.
OK	*Interpret příkazů (shell) je zároveň základním uživatelským rozhraním a zároveň jednoduchým programovacím jazykem. Různých příkazových interpretů existuje celá řada, ale POSIX vyžaduje aby ten, který je k dispozici jako /bin/sh, patřil do rodiny tzv. Bourne shellů.

NOK	Pro překlad lidsky zapamatovatelných jmen počítačů na IP adresy se používá tzv. protokol DNS. Jedná se o hierarchický systém jmen, kde jsou jednotlivé úrovně odděleny tečkou, v „little endian“ pořadí (např. www.fi.muni.cz). V zájmu decentralizace a spolehlivosti si DNS servery udržují překladové tabulky v takzvané distribuované hašovací tabulce (DHT).
NOK	Protokol IP je protokolem třetí vrstvy modelu ISO/OSI a může být tedy realizován na různých instancích nižších vrstev (nejčastěji ale na Ethernetu). Pro doručení paketů protokolu IP musí mít systém k dispozici tzv. hardwarovou adresu (v případě Ethernetu známou jako MAC). Pro překlad mezi adresami IP a adresami nižší vrstvy slouží protokol ARP (Address Resolution Protocol), který pracuje podobně jako DNS: servery ARP udržují globální databázi IP adres a jim odpovídajících MAC adres.
NOK	Protokoly rodiny TCP/IP používají k zlepšení spolehlivosti komunikace tzv. potvrzovací správy (ACK). V protokolech TCP a UDP je potvrzování realizováno pomocí tzv. sekvenčních čísel: jednotlivé pakety jsou očíslovány v pořadí odeslání, a příjemce při nejbližší příležitosti oznámí odesílateli, která čísla paketů již viděl. Pakety, o kterých odesílatel nedostane potvrzení, se pokusí odeslat opakovaně (tzv. re-transmission).
OK	*Téměř každý operační systém poskytuje implementaci protokolů rodiny TCP/IP: jedná se totiž o protokoly, které se používají na internetu. V systémech POSIX slouží k práci s těmito (a jinými) protokoly tzv. sockety, které používají API pro práci se soubory založené na file descriptorech. Spojovanému protokolu TCP odpovídají tzv. proudové (stream) sockety, zatímco nespojované UDP využívá tzv. datagramové sockety.

OK	Autentizace slouží k ustavení identity uživatele (ve smyslu fyzické osoby) a k ověření, že je vlastníkem příslušné abstraktní uživatelské identity v operačním systému. Běžně se k autentizaci uživatelů používají hesla, ale existují i další metody, např. biometriky, nebo fyzické klíče (tokeny).
OK	Schopnost operačního systému vynucovat přístupová práva je ukotvena v ochraně paměti implementované procesorem. Protože přímý přístup k hardware má pouze jádro, může rozhodovat o tom, které požadavky na přístup povolí a které nikoliv. Potřebuje-li proces přistupovat ke zdroji mimo svůj vlastní adresní prostor, musí použít systémové volání, čím jádru umožní provést kontrolu práv.
OK	Přístupová práva souborů (jak obyčejných, tak i speciálních) jsou v POSIXových systémech svázána s i-uzlem, který soubor reprezentuje. Jednotlivé tvrdé odkazy na daný soubor tedy vždy sdílí stejná přístupová práva. Základní informace o přístupových právech jsou kódovány jako uid vlastníka, gid skupiny a skupina 9 bitů, 3 bity (read/write/execute) ve třech skupinách (owner/group/others). Tyto informace můžou (ale nemusí) být doplněny tzv. ACL (access control list), který umožňuje výrazně flexibilnější nastavení jednotlivých práv.
NOK	*Základní jednotkou kontroly práv v POSIXu je uživatel, kterému jsou práva poskytována nebo upírána (jedná se tedy v kontextu kontroly přístupových práv o tzv. subjekt). Tato práva se vztahují na tzv. objekty, například soubory, adresáře, sockety a podobně. O povolení jednotlivých operací rozhoduje politika přístupových práv (access control policy), o které vždy rozhoduje administrátor systému.

NOK	Jednou ze zásadních výhod virtualizace je možnost virtuální počítač pozastavit (suspend), migrovat na jiný fyzický počítač (dokonce i bez přerušení provozu, tzv. „live“), případně pořídit snímek (snapshot) celého virtuálního počítače. Poslední zmiňovaná schopnost nicméně vyžaduje, aby byl obraz disku virtuálního stroje uložen jako soubor v souborovém systému, který poskytuje přímou podporu pro copy-on-write snímky.
NOK	Hypervizory jsou dvojího typu, bare-metal (typ 1) a hostované (typ 2). Hypervizory typu 1 se podobají na malé operační systémy s mikrojádrem (případně exojádrem), poskytují ale na rozdíl od běžných operačních systémů poskytují jen velmi hrubou abstrakci. Na rozdíl od hypervizorů typu 2 poskytují virtualizovanému operačnímu systému přístup k (virtuální) MMU a tedy k stránkování.
OK	*Virtualizace umožňuje provoz více operačních systémů na jednom fyzickém počítači. Typická současná realizace je postavená nad hypervizorem a využívá virtualizačních rozšíření procesoru. Virtuální počítače tak mají oproti těm fyzickým jen minimální dodatečnou režii. Hlavní motivací pro virtualizaci je lepší využití hardwaru a zlepšení izolace mezi jednotlivými službami, které daný fyzický počítač poskytuje. Významným faktorem je ale i zjednodušená administrace virtuálních počítačů oproti fyzickým.
NOK	Paravirtualizace umožňuje minimalizovat režii spojenou se softwarovou emulací hardwaru -- jedná se o alternativu k využití virtualizačních rozšíření procesoru (tyto techniky tedy nelze kombinovat). V tomto režimu poskytuje hypervizor API pro práci s virtuálními zařízeními (síťové karty, disky a podobně) a speciální ovladač na straně virtualizovaného operačního systému toto API přímo využívá.

NOK	Mutex (mutual exclusion device) je zařízení, které má dva stavy: zamčený a odemčený. Jeho primárním účelem je ochrana programu před chybami souběžnosti, tj. před vícenásobným vstupem do kritické sekce, a před uváznutím. Existují dvě základní implementační strategie: tzv. spinlock, který čeká ve smyčce na uvolnění zámku, a tzv. uspávající (suspending) mutex, který čekající vlákno uspí a umožní jinému vláknu během svého čekání využít procesor.
NOK	Kritická sekce je část kódu, která se nesmí vykonávat současně ve více než jedné instanci, protože přistupuje do sdílené paměti. Z tohoto důvodu je potřebné kritické sekce před takovým nežádoucím souběhem chránit některým tzv. synchronizačním zařízením, typicky mutexem, případně semaforem nebo monitorem.
OK	*Moderní operační systémy umožňují souběh mnoha procesů a vláken, často náležících více uživatelům. Často také fungují na paralelním hardwaru (např. na vícejádrových procesorech). S touto tzv. souběžností (concurrency) jsou spojené určité problémy, zejména uváznutí (deadlock) a tzv. race condition.
NOK	Bariéra je složitější zařízení, které slouží k synchronizaci většího počtu vláken nebo procesů. Některé paralelní výpočty probíhají ve fázích, kdy celá první fáze musí skončit, než může začít výpočet další fáze, a tedy všechna vlákna musí s přechodem do další fáze počkat, než jsou všechna ostatní vlákna připravena. Tyto fáze lze jednoduše oddělit právě bariérou. Nevýhodou bariéry je, že podobně jako spinlock využívá aktivního čekání (busy waiting), a tedy čekající vlákna blokují procesor. Tento problém lze vyřešit použitím podmínkové proměnné.

NOK	Virtualizace adresního prostoru (implementovaná prostřednictvím překladu virtuálních adres na fyzické stránkovací jednotkou) slouží v moderních operačních systémech především k implementaci tzv. swapování, kdy při nedostatku fyzické paměti RAM operační systém část dat přesune do paměti externí. Stránkování má sice i další funkce, ale tyto jsou spíše podružné.
NOK	Stránkovací jednotka (známá též jako MMU) je součástí procesoru a její základní funkcí je překládat virtuální adresy na fyzické. Překlad adres je řízen stránkovými tabulkami, které jsou typicky uloženy na předem domluvené (fixní) fyzické adrese. Je-li potřeba přepnout právě běžící proces, operační systém stránkové tabulky přepíše verzí, která odpovídá adresnímu prostoru nového procesu.
NOK	Stránkovací jednotka pracuje s tzv. rámci a stránkami, které mají fixní velikost (často 4KiB): rámce reprezentují fyzickou paměť, kdežto stránky reprezentují data. Stránku dat lze tedy uložit do rámce ve fyzické paměti (RAM), případně na disk. Přepnutí procesu se realizuje nejčastěji tak, že stránky dosud aktivního procesu se přesunou z rámců na disk, a takto uvolněné rámce se naplní stránkami nového procesu.
OK	*Jádro operačního systému běží v privilegovaném režimu procesoru, do kterého se vstupuje hardwarovým přerušením nebo systémovým voláním. Jednou z důležitých význačných vlastností privilegovaného režimu je možnost programovat stránkovací jednotku, která se používá k implementaci separace procesů.

OK	Ovladač (driver) je program, typicky součást jádra, který zprostředkovává komunikaci mezi hardwarem a ostatním softwarem. Ovladače jsou typicky vázané jak na konkrétní hardwarové zařízení, tak i na operační systém. Na softwarové straně poskytují ovladače (alespoň částečně) sjednocené rozhraní: různé pevné disky nebo síťové karty jsou díky ovladačům pro zbytek systému téměř záměnné.
NOK	*Hardware, který vyžaduje pozornost svého ovladače, si tuto typicky vyžádá přerušením: procesor přestane vykonávat aktuálně běžící program, přepne se do privilegovaného režimu a spustí příslušný podprogram uvedený v tabulce přerušení. Tento podprogram provede potřebné akce, např. vyprázdní fronty. Nastane-li během vykonávání tohoto podprogramu další (nebo totéž) přerušení, spustí se nová instance příslušného podprogramu, proto musí být nízkoúrovňová obsluha přerušení reentrantní.
OK	Ne všechny ovladače musí být součástí jádra, některé (např. ovladače tiskáren, skenerů, v menší míře třeba i grafických karet) mohou převážnou část práce vykonávat v uživatelském režimu. Ovladače tohoto typu jsou robustnější (chyby v nich neohrožují integritu jádra) a bezpečnější. V mikrojádrových systémech je většina ovladačů tohoto typu.
OK	V moderních systémech se často pro komunikaci mezi hardwarem a softwarem používá přímý přístup do paměti (DMA). V tomto režimu může hardwarové zařízení přímo přistupovat do RAM (v režimu tzv. bus mastering), asynchronně vůči CPU. Tím se výrazně ušetří množství práce, kterou musí vykonávat CPU, které může během přenosu dat mezi zařízením a RAM provádět jiné činnosti.

OK	Plánovač pro svou činnost využívá systém front, které udržují seznam vláken připravených ke běhu (běhová fronta / run queue), případně vláken, které čekají na nějakou událost (čekací fronta / wait queue). Důvodem čekání může být například snaha o vstup do zamčené kritické sekce, případně zpracování pomalejšího požadavku v jádře (např. čtení ze souboru).
OK	Odebíráni procesoru běžícímu vláknu je realizováno napojením plánovače na obsluhu přerušení časovače. Frekvence tohoto časovače rozhoduje o kompromisu mezi latencí a propustností systému: vyšší frekvence znamená nižší latenci (kratší reakční dobu), ale je spojena s vyšší režií (obsluha přerušení zabere více procesorového času).
NOK	*Plánovač procesů je centrální součástí jádra operačního systému. Jeho základním úkolem je přidělovat procesor jednotlivým vláknům, a případně jej opět odebírat, dojde-li aktuálně běžícímu vláknu jeho přidělený čas. Plánovač také realizuje samotné přepínání běžících vláken, které spočívá v přepsání stránkovacích tabulek tak, aby odpovídali adresnímu prostoru nového vlákna.
OK	Díky preemptivnímu plánování můžou jednotlivá vlákna předstírat, že mají celý procesor jen pro sebe (nemusí tedy obsahovat žádný speciální kód pro uvolnění procesoru). Plánovač dle potřeby vlákno přeruší a procesor uvolní pro běh jiného vlákna, a to kdykoliv v průběhu výpočtu.

OK	Soubory i adresáře jsou v klasickém UNIXovém souborovém systému reprezentované stejnou datovou strukturou, totiž i-uzlem. V případě obyčejného souboru odkazuje tento i-uzel na datové bloky, v případě adresáře pak na datovou strukturu, která mapuje názvy souborů na čísla i-uzlů.
OK	Krom obyčejných souborů a adresářů existují v POSIXových souborových systémech další typy souborů: symbolické (měkké) odkazy, sockety, pojmenované roury, případně bloková nebo znaková zařízení. Při pokusu o otevření měkkého odkazu operační systém přečte jeho cílovou cestu, a místo samotného odkazu se pokusí otevřít soubor, který odpovídá této cestě.
NOK	*Souborový systém je organizován do stromové (adresářové) struktury, ve které obyčejné soubory tvoří listy. Cestou k souboru rozumíme textový popis pozice uzlu v tomto stromě: skládá se z názvů jednotlivých adresářů, poslední je název samotného souboru. Každý soubor je jednoznačně identifikován svojí (unikátní) cestou.
OK	Chce-li program pracovat s obsahem souboru, musí nejprve tento soubor otevřít. Tímto úkonem vznikne záznam v tzv. tabulce popisovačů otevřených souborů (file descriptor), kterou operační systém udržuje pro každý proces. Tato tabulka asociuje jednotlivé otevřené soubory s jejich i-uzly na disku, a umožňuje programu číst a zapisovat data pomocí systémových volání read a write.

NOK	*Systémové knihovny jsou součástí operačního systému: jejich smyslem je poskytovat aplikacím základní služby. Na rozdíl od jádra se systémové knihovny za běhu programu stávají de-facto jeho součástí, jejich kód je totiž namapován do stejného adresního prostoru, a vykonává se se stejnou úrovní oprávnění. Systémové knihovny jsou vždy sdílené, a to ze dvou důvodů: umožňuje to dodavateli OS dodatečně opravit případné chyby  (bez spolupráce dodavatelů aplikačních programů) a zároveň se tím šetří prostředky (zejména paměť).
OK	Sdílené knihovny mají proti statickým knihovnám řadu výhod: jednak šetří místo na disku, protože stačí, aby existovaly v jedné společné kopii, zároveň šetří i místo v paměti, protože operační systém danou knihovnu do RAM uloží pouze jednou, i když je využívána více současně běžícími programy. Sdílené knihovny také zjednodušují aktualizace systému: novou verzi knihovny můžou aplikace obvykle využívat bez jakéhokoliv zásahu do aplikace samotné.
OK	Systémové knihovny (typicky konkrétně knihovna libc) zprostředkovávají programům systémová volání. Mezi příslušnou systémovou knihovnou a jádrem existuje protokol na úrovni strojového jazyka (tzn. na úrovni ABI), který systémová volání realizuje. Směrem k aplikaci poskytuje knihovna řadu funkcí jazyka C, např. write, které tento protokol obalují. Program, který chce provést systémové volání, zavolá takovouto funkci a o samotnou komunikaci s jádrem se již postará knihovna.
OK	V systémech POSIX jsou statické knihovny realizovány jako tzv. archivy: soubory, které obsahují kolekci objektových souborů a případně metadata, která usnadní práci linkeru. Při sestavování programu se statické knihovny nechovají jako monolitický celek: linker vybere pouze ty části (objektové soubory), kterých je v daném programu zapotřebí.